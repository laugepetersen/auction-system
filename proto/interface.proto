syntax = "proto3";

option go_package = "grcp/proto";

// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/interface.proto

package proto;

service AuctionService {
  // Auction
  rpc Bid (BidMessage) returns (Ack) {}
  rpc GetResult(Ping) returns (Ack) {}

  // Passive replication
  rpc PingClient (Ping) returns (Ping) {}

  // Election
  rpc AskForLeadership (VoteReq) returns (VoteReply) {}
  rpc SetNewLeader(VoteReq) returns (VoteReply) {}

  // Message
  rpc Message(Ack) returns(Ack) {}
}

message VoteReq {
  int32 bestHost = 1;
  int32 bestHostLamport = 2;
  repeated int32 queue = 3;
}

message VoteReply {
  bool ack = 1;
}

message Ping {
  int32 host = 1;
  int32 lamport = 2;
}

message BidMessage {
  int32 amount = 1;
  int32 host = 2;
  int32 lamport = 3;
}

message Ack {
  bool ack = 1;
  string message = 2;
  int32 lamport = 3;
}

 message ElectorAnswer {
  int32 lamport = 1;
  int32 port = 2;
  bool answer = 3;
 }